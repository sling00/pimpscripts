#!/usr/bin/perl
#    This file is part of IFMI PoolManager.
#
#    PoolManager is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.   

use warnings;
use strict;
use File::Copy; 
use YAML qw( DumpFile );

my $login = (getpwuid $>);
die "must run as root" if ($login ne 'root');

if (!defined $ARGV[0] || $ARGV[0] eq "") {
  print "Usage: start, stop, restart, switch, installht, cleargraphs, boot (Restarts the machine)\n";
  exit; 
}

 require '/opt/ifmi/pm-common.pl';

 my $conf = &getConfig;
 my %conf = %{$conf};
my $conffile = "/opt/ifmi/poolmanager.conf";

 my $currentm = $conf{settings}{current_mconf};
 my $minerpath = $conf{miners}{$currentm}{mpath};
 $minerpath = 0 if (!defined $minerpath);

if ($ARGV[0] eq "switch") { 
  my $swopt = $ARGV[1]; 
  if (!defined $swopt) {
    print "\nCurrent Profile: " . $conf{miners}{$currentm}{mconfig} . "\n\n"; 
    print "Available Profles: \n";
      foreach my $mid (sort keys %{$conf{miners}}) {
        my $mname = $conf{miners}{$mid}{mconfig};
        my $mpath = $conf{miners}{$mid}{mpath};
        my $mopts = $conf{miners}{$mid}{mopts};
        my $mconf = $conf{miners}{$mid}{savepath};
        print "$mid - $mname\n";
        print "$mpath $mopts --config $mconf\n"
      }
    print "Usage: 'mcontrol switch X' where X is a profile number.\n";
  } elsif (defined $swopt && $swopt =~ m/^\d+$/) {
    if ($swopt ne $conf{settings}{current_mconf}) {
      &stopCGMiner(); 
      ${$conf}{settings}{current_mconf} = $swopt;
      DumpFile($conffile, $conf); 
      sleep 15;
      my $mcheck = `ps -eo command | grep -Ec ^$minerpath`;
      if ($mcheck > 0) {
        &startCGMiner();
        sleep 10;
        &resetPoolSuperPri; 
      }
    } else {
      print "That config is already running.\n";
    }
  }
}


if ($ARGV[0] eq "start") { 
	 if (-e "/opt/ifmi/nomine") {
    die "/opt/ifmi/nomine is present, mining disabled until this file is removed."
  }
  my $mcheck = `ps -eo command | grep -Ec ^$minerpath`;
	if ($mcheck > 0) {
		die "another mining process is running."
	}
	&startCGMiner();
	print "Starting mining....";
	&blog("starting miner") if (defined(${$conf}{settings}{verbose}));
  	sleep 10;
 	&resetPoolSuperPri;
  	print "Mining started, check that it is functional with sc";
 }

if ($ARGV[0] eq "stop") { 
	print "Stopping mining....";
  	&stopCGMiner();
  	print "Mining stopped";
  	&blog("stopping miner") if (defined(${$conf}{settings}{verbose}));
 }

if ($ARGV[0] eq "restart") { 
  print "Stopping mining...";
  &stopCGMiner();
  &blog("stopping miner") if (defined(${$conf}{settings}{verbose}));
  sleep 10;
   my $mcheck = `ps -eo command | grep -Ec ^$minerpath`;
        if ($mcheck > 0) {
          die "Miner still running, reboot the machine or attempt to kill the miner."
        }
        print "Starting mining...";
        &startCGMiner();
        &blog("starting miner") if (defined(${$conf}{settings}{verbose}));
  sleep 10;
  &resetPoolSuperPri; 
  		print "Mining started successfully, check with sc";
}

if ($ARGV[0] eq "boot") {
	my $bootcmd; 
	if (-e "/sbin/coldreboot") {
		$bootcmd = "/sbin/coldreboot"
	} else {
		$bootcmd = "/sbin/reboot"
	}
	`$bootcmd`;
	&blog("booting miner with $bootcmd") if (defined(${$conf}{settings}{verbose}));
}

if ($ARGV[0] eq "cleargraphs") {
  system('/bin/rm /opt/ifmi/rrdtool/*.rrd');
  system('/bin/rm /var/www/IFMI/graphs/*.png');
  `/opt/ifmi/pmgraph.pl`;
}

if ($ARGV[0] eq "installht") {
	if (-e "/var/htpasswd") {
   		`/usr/bin/htpasswd -b /var/htpasswd poolmanager live`;
	} else {
  		`/usr/bin/htpasswd -bc /var/htpasswd poolmanager live`;
  }
  `chown www-data /var/htpasswd`;
	if (! `grep AuthUserFile /etc/apache2/sites-available/default-ssl`) {
    copy "/etc/apache2/sites-available/default-ssl", "/etc/apache2/sites-available/default-ssl.pre-ifmi"
    if (!-f "/etc/apache2/sites-available/default-ssl.pre-ifmi");
    open my $din, '<', "/etc/apache2/sites-available/default-ssl";
    open my $dout, '>', "/etc/apache2/sites-available/default-ssl.out";
    while (<$din>) {
      print $dout $_;
      last if /Directory \/>/;
    }
    print $dout "\n AuthType Basic\n  AuthName \"Authentication Required\"\n";
    print $dout " AuthUserFile /var/htpasswd\n";
    print $dout "# Comment out the line below to disable password protection\n";
    print $dout " Require valid-user\n\n";
    while (<$din>) {
      print $dout $_;
    }
    close $dout;
    move "/etc/apache2/sites-available/default-ssl.out", "/etc/apache2/sites-available/default-ssl";
	 `/usr/sbin/service apache2 graceful`;
	}
  if (! `grep -E /usr/bin/htpasswd /etc/sudoers`) {
    my $fin = "/etc/sudoers";
    open my $sin, '<', $fin;
    open my $sout, '>', "$fin.out";    
    while (<$sin>) {
      s/\/opt\/ifmi\/mcontrol/\/opt\/ifmi\/mcontrol,\/usr\/bin\/htpasswd/;
      print $sout $_;
    }    
    close $sin; close $sout;
    rename $fin, "$fin.back";
    rename "$fin.out", $fin; 
    `chmod 0440 /etc/sudoers`;
  }	
}





